//lecture 5/28/2023 8pm

In C++, a namespace is a way to group related code elements, such as variables, 
functions, and classes, under a named scope. Namespaces help prevent naming conflicts 
and provide a mechanism for organizing code and avoiding naming collisions, especially 
when different libraries or components are combined.

A namespace declaration begins with the namespace keyword, followed by the namespace 
name and a block of code enclosed in curly braces. Here's an example of a namespace 
declaration:

namespace MyNamespace {
    // Code elements go here
    int myVariable = 42;

    void myFunction() {
        // Function implementation
    }

    class MyClass {
        // Class definition
    };
}

In the example above, we have defined a namespace called MyNamespace. Inside the namespace, 
we have a variable myVariable, a function myFunction(), and a class MyClass. These elements 
are scoped within the namespace, meaning they are accessed using the namespace name as a prefix.

To use code elements from a namespace, you can either qualify them with the namespace name or 
bring them into scope using the using directive. Here's an example:

#include <iostream>

using namespace MyNamespace;  // Bring all elements from MyNamespace into scope

int main() {
    std::cout << myVariable << std::endl;  // Access variable from MyNamespace
    myFunction();  // Call function from MyNamespace

    MyClass obj;  // Create object of MyClass from MyNamespace

    return 0;
}

In the above example, we have brought all elements from the MyNamespace into the scope of main() 
using the using directive. This allows us to directly access myVariable, myFunction(), and MyClass 
without explicitly qualifying them with the namespace name.

Namespaces are especially useful in larger codebases and when integrating multiple libraries or 
components to avoid naming conflicts and to provide a clear organization of code.


//////
here's an example that demonstrates a naming conflict and how namespaces can help resolve it:

#include <iostream>

namespace FirstNamespace {
    int value = 10;

    void display() {
        std::cout << "Value from FirstNamespace: " << value << std::endl;
    }
}

namespace SecondNamespace {
    int value = 20;

    void display() {
        std::cout << "Value from SecondNamespace: " << value << std::endl;
    }
}

int main() {
    std::cout << "Value from FirstNamespace: " << FirstNamespace::value << std::endl;
    FirstNamespace::display();

    std::cout << "Value from SecondNamespace: " << SecondNamespace::value << std::endl;
    SecondNamespace::display();

    return 0;
}

In this example, we have two namespaces, FirstNamespace and SecondNamespace, both 
containing a variable named value and a function named display().

If we didn't use namespaces, there would be a naming conflict between the variables and 
functions with the same names. However, by placing them in separate namespaces, we can 
disambiguate them and use the intended versions of these elements.

In the main() function, we access the value variables and display() functions by qualifying 
them with the appropriate namespace names (FirstNamespace:: and SecondNamespace::). This 
allows us to use the variables and functions from each namespace without conflicts.

Output:
Value from FirstNamespace: 10
Value from FirstNamespace: 10
Value from SecondNamespace: 20
Value from SecondNamespace: 20


As you can see, using namespaces enables us to distinguish between the similarly named 
elements in different namespaces and resolve any potential conflicts.


/////
In C++, you cannot define two namespaces with the same name within the same scope. 
If you attempt to do so, it will result in a compilation error due to the duplicate definition. 
Each namespace must have a unique name to avoid conflicts.

For example, the following code will produce a compilation error:

namespace MyNamespace {
    // Namespace definition
}

namespace MyNamespace {
    // Another namespace definition with the same name - ERROR!
}

Attempting to define MyNamespace twice will lead to a compilation error indicating 
that the namespace has been redefined.

If you need to group related code elements under the same namespace but have different 
modules or components, you can consider using nested namespaces or defining separate
namespaces with distinct names.

Here's an example demonstrating nested namespaces:
Remember that namespaces are primarily used to group related code elements and avoid naming conflicts, so choosing meaningful and descriptive names for namespaces is essential for code clarity and organization.
namespace MyNamespace {
    namespace SubNamespace1 {
        // Code elements for SubNamespace1
    }

    namespace SubNamespace2 {
        // Code elements for SubNamespace2
    }
}

In this example, we have a namespace MyNamespace that contains two nested namespaces, 
SubNamespace1 and SubNamespace2. Each nested namespace can have its own set of code 
elements without conflicting with each other.

Remember that namespaces are primarily used to group related code elements and avoid 
naming conflicts, so choosing meaningful and descriptive names for namespaces is 
essential for code clarity and organization.
